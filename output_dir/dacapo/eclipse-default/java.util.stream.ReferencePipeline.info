47
java/util/stream/ReferencePipeline.reduce(Ljava/util/function/BinaryOperator;)Ljava/util/Optional;
PTG:
Vars:
6
$r2 1 2 
_ret 1 5 
$r4 1 5 
r1 1 -2 
r0 1 -1 
$r3 1 5 
Fields: 0
Accesses: 0
Functions: 2
0 2 -1 2 
1 1 -2 
Constructors: 0

Summary: 3
-1 2 -2 
java/util/stream/ReferencePipeline.toArray(Ljava/util/function/IntFunction;)[Ljava/lang/Object;
PTG:
Vars:
7
$r5 1 12 
_ret 1 12 
r2 1 -1 
$r4 1 8 
r0 1 -2 
$r6 1 12 
$r3 1 4 
Fields: 0
Accesses: 0
Functions: 3
2 2 -1 -2 
7 2 -2 4 
8 2 -2 8 
Constructors: 0

Summary: 4
-1 4 8 -2 
java/util/stream/ReferencePipeline.allMatch(Ljava/util/function/Predicate;)Z
PTG:
Vars:
6
r1 1 -2 
$r2 1 2 
$r5 1 8 
$r3 1 5 
r0 1 -1 
$r4 1 8 
Fields: 0
Accesses: 0
Functions: 3
0 2 -1 5 
2 2 -2 2 
11 1 8 
Constructors: 0

Summary: 4
-1 5 8 -2 
java/util/stream/ReferencePipeline.unordered()Ljava/util/stream/Stream;
PTG:
Vars:
4
$r1 1 9 
_ret 1 9 
r0 1 -1 
$r2 1 15 
Fields: 0
Accesses: 0
Functions: 2
0 1 -1 
21 3 -1 9 15 
Constructors: 1
21 9

Summary: 0

java/util/stream/ReferencePipeline.forEachWithCancel(Ljava/util/Spliterator;Ljava/util/stream/Sink;)V
PTG:
Vars:
3
r0 1 -3 
r2 1 -1 
r1 1 -2 
Fields: 0
Accesses: 0
Functions: 2
0 1 -3 
9 2 -2 -3 
Constructors: 0

Summary: 5
-1 1 -3 0 -2 
java/util/stream/ReferencePipeline.<init>(Ljava/util/Spliterator;IZ)V
PTG:
Vars:
2
r0 1 -1 
r1 1 -2 
Fields: 0
Accesses: 0
Functions: 1
4 2 -1 -2 
Constructors: 1
4 -1

Summary: 2
0 -2 
java/util/stream/ReferencePipeline.collect(Ljava/util/stream/Collector;)Ljava/lang/Object;
PTG:
Vars:
16
r0 1 -1 
$r2 1 112 
$r11 1 83 
$r5 1 49 
$r9 1 37 
$r8 1 32 
$r14 3 59 89 118 
r10 2 59 89 
$r7 1 70 
_ret 3 59 89 118 
$r12 1 91 
$r4 1 13 
$r3 1 8 
r1 1 -2 
r6 1 66 
$r13 1 96 
Fields: 0
Accesses: 0
Functions: 17
0 1 -1 
32 2 32 37 
69 3 66 89 59 
7 1 -2 
8 2 8 13 
75 2 -1 70 
111 1 -2 
48 1 -2 
112 3 112 89 59 
49 1 49 
81 2 -1 83 
82 1 -2 
24 1 -1 
90 1 -2 
91 2 96 91 
60 1 -2 
31 1 -2 
Constructors: 0

Summary: 10
83 91 66 70 -1 49 8 32 -2 112 
java/util/stream/ReferencePipeline.mapToDouble(Ljava/util/function/ToDoubleFunction;)Ljava/util/stream/DoubleStream;
PTG:
Vars:
5
_ret 1 5 
r3 1 -1 
$r4 1 11 
r0 1 -2 
$r2 1 5 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
22 4 -1 -2 5 11 
Constructors: 1
22 5

Summary: 2
-1 -2 
java/util/stream/ReferencePipeline.skip(J)Ljava/util/stream/Stream;
PTG:
Vars:
3
_ret 1 31 
$r1 1 31 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 3
10 0 
28 1 -1 
14 0 
Constructors: 0

Summary: 1
11 
java/util/stream/ReferencePipeline.reduce(Ljava/lang/Object;Ljava/util/function/BiFunction;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;
PTG:
Vars:
7
$r4 1 4 
_ret 1 7 
r3 1 -4 
r1 1 -2 
r2 1 -3 
$r5 1 7 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 2
0 2 -1 4 
3 3 -2 -3 -4 
Constructors: 0

Summary: 5
-1 -4 4 -3 -2 
java/util/stream/ReferencePipeline.sorted()Ljava/util/stream/Stream;
PTG:
Vars:
3
_ret 1 1 
$r1 1 1 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 1
0 1 -1 
Constructors: 0

Summary: 1
-1 
java/util/stream/ReferencePipeline.makeNodeBuilder(JLjava/util/function/IntFunction;)Ljava/util/stream/Node$Builder;
PTG:
Vars:
4
_ret 1 2 
$r1 1 2 
r0 1 -3 
r2 1 -1 
Fields: 0
Accesses: 0
Functions: 1
1 1 -3 
Constructors: 0

Summary: 3
-1 1 -3 
java/util/stream/ReferencePipeline.mapToLong(Ljava/util/function/ToLongFunction;)Ljava/util/stream/LongStream;
PTG:
Vars:
5
_ret 1 5 
$r2 1 5 
r0 1 -2 
$r4 1 11 
r3 1 -1 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
22 4 -1 -2 5 11 
Constructors: 1
22 5

Summary: 2
-1 -2 
java/util/stream/ReferencePipeline.flatMap(Ljava/util/function/Function;)Ljava/util/stream/Stream;
PTG:
Vars:
5
r3 1 -1 
r0 1 -2 
_ret 1 5 
$r4 1 11 
$r2 1 5 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
26 4 -1 -2 5 11 
Constructors: 1
26 5

Summary: 2
-1 -2 
java/util/stream/ReferencePipeline.collect(Ljava/util/function/Supplier;Ljava/util/function/BiConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;
PTG:
Vars:
7
_ret 1 7 
r3 1 -4 
r0 1 -1 
$r4 1 4 
r2 1 -3 
$r5 1 7 
r1 1 -2 
Fields: 0
Accesses: 0
Functions: 2
0 2 -1 4 
3 3 -2 -3 -4 
Constructors: 0

Summary: 5
-1 -4 4 -3 -2 
java/util/stream/ReferencePipeline.noneMatch(Ljava/util/function/Predicate;)Z
PTG:
Vars:
6
$r5 1 8 
$r2 1 2 
r0 1 -1 
r1 1 -2 
$r4 1 8 
$r3 1 5 
Fields: 0
Accesses: 0
Functions: 3
0 2 -1 5 
2 2 -2 2 
11 1 8 
Constructors: 0

Summary: 4
-1 5 8 -2 
java/util/stream/ReferencePipeline.count()J
PTG:
Vars:
3
$r1 1 1 
$r2 1 6 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 3
-1 0 
0 2 -1 1 
6 1 6 
Constructors: 0

Summary: 3
-1 1 6 
java/util/stream/ReferencePipeline.unordered()Ljava/util/stream/BaseStream;
PTG:
Vars:
3
_ret 1 1 
r0 1 -1 
$r1 1 1 
Fields: 0
Accesses: 0
Functions: 1
0 1 -1 
Constructors: 0

Summary: 1
-1 
java/util/stream/ReferencePipeline.forEachOrdered(Ljava/util/function/Consumer;)V
PTG:
Vars:
3
$r2 1 3 
r0 1 -1 
r1 1 -2 
Fields: 0
Accesses: 0
Functions: 2
2 1 -2 
6 2 -1 3 
Constructors: 0

Summary: 4
-1 3 0 -2 
java/util/stream/ReferencePipeline.iterator()Ljava/util/Iterator;
PTG:
Vars:
4
_ret 1 4 
$r2 1 4 
r0 1 -1 
$r1 1 1 
Fields: 0
Accesses: 0
Functions: 2
0 1 -1 
1 1 1 
Constructors: 0

Summary: 2
-1 1 
java/util/stream/ReferencePipeline.mapToInt(Ljava/util/function/ToIntFunction;)Ljava/util/stream/IntStream;
PTG:
Vars:
5
$r4 1 11 
_ret 1 5 
$r2 1 5 
r0 1 -2 
r3 1 -1 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
22 4 -1 -2 5 11 
Constructors: 1
22 5

Summary: 2
-1 -2 
java/util/stream/ReferencePipeline.max(Ljava/util/Comparator;)Ljava/util/Optional;
PTG:
Vars:
5
$r3 1 5 
_ret 1 5 
r1 1 -2 
r0 1 -1 
$r2 1 2 
Fields: 0
Accesses: 0
Functions: 2
0 2 -1 2 
1 1 -2 
Constructors: 0

Summary: 3
-1 2 -2 
java/util/stream/ReferencePipeline.getOutputShape()Ljava/util/stream/StreamShape;
PTG:
Vars:
3
$r0 1 0 
_ret 1 0 
r1 1 -1 
Fields: 0
Accesses: 0
Functions: 0
Constructors: 0

Summary: 1
-1 
java/util/stream/ReferencePipeline.distinct()Ljava/util/stream/Stream;
PTG:
Vars:
3
_ret 1 1 
r0 1 -1 
$r1 1 1 
Fields: 0
Accesses: 0
Functions: 1
0 1 -1 
Constructors: 0

Summary: 1
-1 
java/util/stream/ReferencePipeline.lambda$count$2(Ljava/lang/Object;)J
PTG:
Vars:
1
r0 1 -2 
Fields: 0
Accesses: 0
Functions: 0
Constructors: 0

Summary: 2
0 -2 
java/util/stream/ReferencePipeline.<init>(Ljava/util/stream/AbstractPipeline;I)V
PTG:
Vars:
2
r1 1 -2 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 1
3 2 -1 -2 
Constructors: 1
3 -1

Summary: 2
0 -2 
java/util/stream/ReferencePipeline.findFirst()Ljava/util/Optional;
PTG:
Vars:
5
_ret 1 5 
$r1 1 2 
r0 1 -1 
$r3 1 5 
$r2 1 5 
Fields: 0
Accesses: 0
Functions: 2
0 2 -1 2 
1 0 
Constructors: 0

Summary: 2
-1 2 
java/util/stream/ReferencePipeline.filter(Ljava/util/function/Predicate;)Ljava/util/stream/Stream;
PTG:
Vars:
5
r3 1 -1 
$r2 1 5 
_ret 1 5 
r0 1 -2 
$r4 1 11 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
18 4 -1 -2 5 11 
Constructors: 1
18 5

Summary: 3
-1 0 -2 
java/util/stream/ReferencePipeline.forEach(Ljava/util/function/Consumer;)V
PTG:
Vars:
3
r0 1 -1 
r1 1 -2 
$r2 1 3 
Fields: 0
Accesses: 0
Functions: 2
2 1 -2 
6 2 -1 3 
Constructors: 0

Summary: 4
-1 3 0 -2 
java/util/stream/ReferencePipeline.toArray()[Ljava/lang/Object;
PTG:
Vars:
4
_ret 1 6 
$r1 1 1 
$r2 1 6 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 2
-1 0 
0 2 -1 1 
Constructors: 0

Summary: 2
-1 1 
java/util/stream/ReferencePipeline.min(Ljava/util/Comparator;)Ljava/util/Optional;
PTG:
Vars:
5
_ret 1 5 
$r3 1 5 
r1 1 -2 
r0 1 -1 
$r2 1 2 
Fields: 0
Accesses: 0
Functions: 2
0 2 -1 2 
1 1 -2 
Constructors: 0

Summary: 3
-1 2 -2 
java/util/stream/ReferencePipeline.map(Ljava/util/function/Function;)Ljava/util/stream/Stream;
PTG:
Vars:
5
r3 1 -1 
$r4 1 11 
_ret 1 5 
$r2 1 5 
r0 1 -2 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
22 4 -1 -2 5 11 
Constructors: 1
22 5

Summary: 3
-1 0 -2 
java/util/stream/ReferencePipeline.flatMapToLong(Ljava/util/function/Function;)Ljava/util/stream/LongStream;
PTG:
Vars:
5
r0 1 -2 
_ret 1 5 
r3 1 -1 
$r4 1 11 
$r2 1 5 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
26 4 -1 -2 5 11 
Constructors: 1
26 5

Summary: 2
-1 -2 
java/util/stream/ReferencePipeline.<init>(Ljava/util/function/Supplier;IZ)V
PTG:
Vars:
2
r1 1 -2 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 1
4 2 -1 -2 
Constructors: 1
4 -1

Summary: 2
0 -2 
java/util/stream/ReferencePipeline.wrap(Ljava/util/stream/PipelineHelper;Ljava/util/function/Supplier;Z)Ljava/util/Spliterator;
PTG:
Vars:
5
r3 1 -1 
$r0 1 0 
_ret 1 0 
r1 1 -2 
r2 1 -3 
Fields: 0
Accesses: 0
Functions: 1
7 3 0 -2 -3 
Constructors: 1
7 0

Summary: 5
-1 1 -3 0 -2 
java/util/stream/ReferencePipeline.peek(Ljava/util/function/Consumer;)Ljava/util/stream/Stream;
PTG:
Vars:
5
$r2 1 5 
$r4 1 11 
r3 1 -1 
_ret 1 5 
r0 1 -2 
Fields: 0
Accesses: 0
Functions: 2
16 4 -1 -2 5 11 
1 1 -2 
Constructors: 1
16 5

Summary: 2
-1 -2 
java/util/stream/ReferencePipeline.anyMatch(Ljava/util/function/Predicate;)Z
PTG:
Vars:
6
$r3 1 5 
r1 1 -2 
$r2 1 2 
$r5 1 8 
r0 1 -1 
$r4 1 8 
Fields: 0
Accesses: 0
Functions: 3
0 2 -1 5 
2 2 -2 2 
11 1 8 
Constructors: 0

Summary: 4
-1 5 8 -2 
java/util/stream/ReferencePipeline.flatMapToInt(Ljava/util/function/Function;)Ljava/util/stream/IntStream;
PTG:
Vars:
5
_ret 1 5 
$r4 1 11 
r3 1 -1 
r0 1 -2 
$r2 1 5 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
26 4 -1 -2 5 11 
Constructors: 1
26 5

Summary: 2
-1 -2 
java/util/stream/ReferencePipeline.lambda$toArray$0(I)[Ljava/lang/Object;
PTG:
Vars:
2
_ret 1 1 
$r0 1 1 
Fields: 0
Accesses: 0
Functions: 0
Constructors: 0

Summary: 0

java/util/stream/ReferencePipeline.sorted(Ljava/util/Comparator;)Ljava/util/stream/Stream;
PTG:
Vars:
4
_ret 1 2 
r1 1 -2 
$r2 1 2 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 1
1 2 -1 -2 
Constructors: 0

Summary: 2
-1 -2 
java/util/stream/ReferencePipeline.flatMapToDouble(Ljava/util/function/Function;)Ljava/util/stream/DoubleStream;
PTG:
Vars:
5
_ret 1 5 
$r2 1 5 
r3 1 -1 
r0 1 -2 
$r4 1 11 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
26 4 -1 -2 5 11 
Constructors: 1
26 5

Summary: 2
-1 -2 
java/util/stream/ReferencePipeline.lambda$collect$1(Ljava/util/function/BiConsumer;Ljava/lang/Object;Ljava/lang/Object;)V
PTG:
Vars:
3
r2 1 -4 
r0 1 -2 
r1 1 -3 
Fields: 0
Accesses: 0
Functions: 1
3 3 -2 -3 -4 
Constructors: 0

Summary: 4
2 -4 -3 -2 
java/util/stream/ReferencePipeline.lazySpliterator(Ljava/util/function/Supplier;)Ljava/util/Spliterator;
PTG:
Vars:
4
$r0 1 0 
_ret 1 0 
r2 1 -1 
r1 1 -2 
Fields: 0
Accesses: 0
Functions: 1
5 2 0 -2 
Constructors: 1
5 0

Summary: 3
-1 0 -2 
java/util/stream/ReferencePipeline.evaluateToNode(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;ZLjava/util/function/IntFunction;)Ljava/util/stream/Node;
PTG:
Vars:
6
_ret 1 5 
r0 1 -2 
$r3 1 5 
r1 1 -3 
r4 1 -1 
r2 1 -5 
Fields: 0
Accesses: 0
Functions: 1
3 3 -2 -3 -5 
Constructors: 0

Summary: 7
-1 -5 1 -3 0 -2 3 
java/util/stream/ReferencePipeline.limit(J)Ljava/util/stream/Stream;
PTG:
Vars:
3
$r1 1 21 
_ret 1 21 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 3
20 1 -1 
10 0 
14 0 
Constructors: 0

Summary: 2
-1 11 
java/util/stream/ReferencePipeline.reduce(Ljava/lang/Object;Ljava/util/function/BinaryOperator;)Ljava/lang/Object;
PTG:
Vars:
6
_ret 1 7 
r2 1 -3 
r0 1 -1 
$r3 1 4 
r1 1 -2 
$r4 1 7 
Fields: 0
Accesses: 0
Functions: 2
0 2 -1 4 
3 2 -2 -3 
Constructors: 0

Summary: 4
-1 4 -3 -2 
java/util/stream/ReferencePipeline.findAny()Ljava/util/Optional;
PTG:
Vars:
5
_ret 1 5 
r0 1 -1 
$r1 1 2 
$r2 1 5 
$r3 1 5 
Fields: 0
Accesses: 0
Functions: 2
0 2 -1 2 
1 0 
Constructors: 0

Summary: 2
-1 2 
