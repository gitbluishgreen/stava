60
java/util/stream/DoublePipeline.lambda$count$7(D)J
PTG:
Vars:
0
Fields: 0
Accesses: 0
Functions: 0
Constructors: 0

Summary: 0

java/util/stream/DoublePipeline.reduce(Ljava/util/function/DoubleBinaryOperator;)Ljava/util/OptionalDouble;
PTG:
Vars:
6
_ret 1 5 
r0 1 -1 
$r3 1 5 
$r2 1 2 
r1 1 -2 
$r4 1 5 
Fields: 0
Accesses: 0
Functions: 2
0 2 -1 2 
1 1 -2 
Constructors: 0

Summary: 3
-2 2 -1 
java/util/stream/DoublePipeline.anyMatch(Ljava/util/function/DoublePredicate;)Z
PTG:
Vars:
6
$r2 1 2 
r1 1 -2 
$r5 1 8 
r0 1 -1 
$r3 1 5 
$r4 1 8 
Fields: 0
Accesses: 0
Functions: 3
0 2 -1 5 
2 2 -2 2 
11 1 8 
Constructors: 0

Summary: 4
5 -2 8 -1 
java/util/stream/DoublePipeline.map(Ljava/util/function/DoubleUnaryOperator;)Ljava/util/stream/DoubleStream;
PTG:
Vars:
5
_ret 1 5 
r0 1 -2 
$r4 1 11 
r3 1 -1 
$r2 1 5 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
22 4 -1 -2 5 11 
Constructors: 1
22 5

Summary: 2
-2 -1 
java/util/stream/DoublePipeline.lambda$sum$3([D[D)V
PTG:
Vars:
2
r0 1 -2 
r1 1 -3 
Fields: 0
Accesses: 0
Functions: 2
4 1 -2 
12 1 -2 
Constructors: 0

Summary: 4
1 -2 0 -3 
java/util/stream/DoublePipeline.flatMap(Ljava/util/function/DoubleFunction;)Ljava/util/stream/DoubleStream;
PTG:
Vars:
5
_ret 1 5 
$r4 1 11 
r3 1 -1 
$r2 1 5 
r0 1 -2 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
26 4 -1 -2 5 11 
Constructors: 1
26 5

Summary: 2
-2 -1 
java/util/stream/DoublePipeline.lambda$distinct$0(Ljava/lang/Double;)D
PTG:
Vars:
1
r0 1 -2 
Fields: 0
Accesses: 0
Functions: 1
0 1 -2 
Constructors: 0

Summary: 2
-2 0 
java/util/stream/DoublePipeline.spliterator()Ljava/util/Spliterator$OfDouble;
PTG:
Vars:
4
_ret 1 4 
$r2 1 4 
$r1 1 1 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 2
0 1 -1 
1 1 1 
Constructors: 0

Summary: 2
1 -1 
java/util/stream/DoublePipeline.filter(Ljava/util/function/DoublePredicate;)Ljava/util/stream/DoubleStream;
PTG:
Vars:
5
_ret 1 5 
$r2 1 5 
r0 1 -2 
$r4 1 11 
r3 1 -1 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
18 4 -1 -2 5 11 
Constructors: 1
18 5

Summary: 2
-2 -1 
java/util/stream/DoublePipeline.limit(J)Ljava/util/stream/DoubleStream;
PTG:
Vars:
3
_ret 1 21 
$r1 1 21 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 3
20 1 -1 
10 0 
14 0 
Constructors: 0

Summary: 2
11 -1 
java/util/stream/DoublePipeline.spliterator()Ljava/util/Spliterator;
PTG:
Vars:
3
_ret 1 1 
r0 1 -1 
$r1 1 1 
Fields: 0
Accesses: 0
Functions: 1
0 1 -1 
Constructors: 0

Summary: 1
-1 
java/util/stream/DoublePipeline.forEach(Ljava/util/function/DoubleConsumer;)V
PTG:
Vars:
3
r0 1 -1 
$r2 1 3 
r1 1 -2 
Fields: 0
Accesses: 0
Functions: 2
2 1 -2 
6 2 -1 3 
Constructors: 0

Summary: 4
3 -2 0 -1 
java/util/stream/DoublePipeline.skip(J)Ljava/util/stream/DoubleStream;
PTG:
Vars:
3
_ret 1 33 
$r1 1 33 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 3
32 1 -1 
10 0 
14 0 
Constructors: 0

Summary: 1
11 
java/util/stream/DoublePipeline.sum()D
PTG:
Vars:
6
$r2 1 6 
r5 1 16 
$r3 1 11 
$r1 1 1 
$r4 1 16 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 3
-1 0 
0 4 -1 1 6 11 
23 1 16 
Constructors: 0

Summary: 5
6 16 11 1 -1 
java/util/stream/DoublePipeline.adapt(Ljava/util/Spliterator;)Ljava/util/Spliterator$OfDouble;
PTG:
Vars:
2
r0 1 -2 
$r1 1 25 
Fields: 0
Accesses: 0
Functions: 2
22 0 
31 1 25 
Constructors: 1
31 25

Summary: 1
0 
java/util/stream/DoublePipeline.min()Ljava/util/OptionalDouble;
PTG:
Vars:
4
_ret 1 6 
$r2 1 6 
r0 1 -1 
$r1 1 1 
Fields: 0
Accesses: 0
Functions: 2
-1 0 
0 2 -1 1 
Constructors: 0

Summary: 2
1 -1 
java/util/stream/DoublePipeline.toArray()[D
PTG:
Vars:
8
$r1 1 1 
_ret 1 15 
$r4 1 12 
$r5 1 15 
$r3 1 6 
r0 1 -1 
$r2 1 6 
$r6 1 15 
Fields: 0
Accesses: 0
Functions: 4
-1 0 
0 2 -1 1 
9 1 6 
12 1 12 
Constructors: 0

Summary: 4
6 12 1 -1 
java/util/stream/DoublePipeline.lambda$collect$8(Ljava/util/function/BiConsumer;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
PTG:
Vars:
4
_ret 1 -3 
r0 1 -2 
r1 1 -3 
r2 1 -4 
Fields: 0
Accesses: 0
Functions: 1
3 3 -2 -3 -4 
Constructors: 0

Summary: 4
1 -2 -4 2 
java/util/stream/DoublePipeline.unordered()Ljava/util/stream/DoubleStream;
PTG:
Vars:
4
_ret 1 9 
$r1 1 9 
r0 1 -1 
$r2 1 15 
Fields: 0
Accesses: 0
Functions: 2
0 1 -1 
21 3 -1 9 15 
Constructors: 1
21 9

Summary: 0

java/util/stream/DoublePipeline.lambda$toArray$9(I)[Ljava/lang/Double;
PTG:
Vars:
2
_ret 1 1 
$r0 1 1 
Fields: 0
Accesses: 0
Functions: 0
Constructors: 0

Summary: 0

java/util/stream/DoublePipeline.mapToLong(Ljava/util/function/DoubleToLongFunction;)Ljava/util/stream/LongStream;
PTG:
Vars:
5
$r4 1 11 
_ret 1 5 
$r2 1 5 
r0 1 -2 
r3 1 -1 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
22 4 -1 -2 5 11 
Constructors: 1
22 5

Summary: 2
-2 -1 
java/util/stream/DoublePipeline.findAny()Ljava/util/OptionalDouble;
PTG:
Vars:
5
$r1 1 2 
_ret 1 5 
$r3 1 5 
r0 1 -1 
$r2 1 5 
Fields: 0
Accesses: 0
Functions: 2
0 2 -1 2 
1 0 
Constructors: 0

Summary: 2
2 -1 
java/util/stream/DoublePipeline.wrap(Ljava/util/stream/PipelineHelper;Ljava/util/function/Supplier;Z)Ljava/util/Spliterator;
PTG:
Vars:
5
_ret 1 0 
r2 1 -3 
$r0 1 0 
r3 1 -1 
r1 1 -2 
Fields: 0
Accesses: 0
Functions: 1
7 3 0 -2 -3 
Constructors: 1
7 0

Summary: 5
1 -2 0 -1 -3 
java/util/stream/DoublePipeline.access$000(Ljava/util/Spliterator;)Ljava/util/Spliterator$OfDouble;
PTG:
Vars:
3
_ret 1 1 
$r1 1 1 
r0 1 -2 
Fields: 0
Accesses: 0
Functions: 1
0 1 -2 
Constructors: 0

Summary: 2
-2 0 
java/util/stream/DoublePipeline.adapt(Ljava/util/stream/Sink;)Ljava/util/function/DoubleConsumer;
PTG:
Vars:
3
_ret 1 31 
r0 1 -2 
$r2 1 31 
Fields: 0
Accesses: 0
Functions: 3
22 0 
25 1 -2 
27 1 -2 
Constructors: 0

Summary: 1
0 
java/util/stream/DoublePipeline.getOutputShape()Ljava/util/stream/StreamShape;
PTG:
Vars:
3
$r0 1 0 
_ret 1 0 
r1 1 -1 
Fields: 0
Accesses: 0
Functions: 0
Constructors: 0

Summary: 1
-1 
java/util/stream/DoublePipeline.distinct()Ljava/util/stream/DoubleStream;
PTG:
Vars:
6
_ret 1 14 
$r3 1 9 
r0 1 -1 
$r4 1 14 
$r2 1 4 
$r1 1 1 
Fields: 0
Accesses: 0
Functions: 4
0 1 -1 
-1 0 
1 1 1 
4 2 4 9 
Constructors: 0

Summary: 4
4 9 1 -1 
java/util/stream/DoublePipeline.unordered()Ljava/util/stream/BaseStream;
PTG:
Vars:
3
_ret 1 1 
$r1 1 1 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 1
0 1 -1 
Constructors: 0

Summary: 1
-1 
java/util/stream/DoublePipeline.mapToObj(Ljava/util/function/DoubleFunction;)Ljava/util/stream/Stream;
PTG:
Vars:
5
_ret 1 5 
r0 1 -2 
r3 1 -1 
$r2 1 5 
$r4 1 11 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
22 4 -1 -2 5 11 
Constructors: 1
22 5

Summary: 2
-2 -1 
java/util/stream/DoublePipeline.findFirst()Ljava/util/OptionalDouble;
PTG:
Vars:
5
_ret 1 5 
$r3 1 5 
$r2 1 5 
$r1 1 2 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 2
0 2 -1 2 
1 0 
Constructors: 0

Summary: 2
2 -1 
java/util/stream/DoublePipeline.lambda$sum$1()[D
PTG:
Vars:
2
_ret 1 1 
$r0 1 1 
Fields: 0
Accesses: 0
Functions: 0
Constructors: 0

Summary: 0

java/util/stream/DoublePipeline.reduce(DLjava/util/function/DoubleBinaryOperator;)D
PTG:
Vars:
5
$r2 1 3 
r1 1 -3 
$r4 1 6 
r0 1 -1 
$r3 1 6 
Fields: 0
Accesses: 0
Functions: 3
0 2 -1 3 
2 1 -3 
9 1 6 
Constructors: 0

Summary: 4
6 3 -1 -3 
java/util/stream/DoublePipeline.forEachWithCancel(Ljava/util/Spliterator;Ljava/util/stream/Sink;)V
PTG:
Vars:
5
r2 1 -3 
r1 1 4 
r4 1 -1 
r0 1 -2 
r3 1 9 
Fields: 0
Accesses: 0
Functions: 4
0 1 -2 
20 2 4 9 
5 1 -3 
11 1 -3 
Constructors: 0

Summary: 7
4 9 1 -2 0 -1 -3 
java/util/stream/DoublePipeline.sequential()Ljava/util/stream/DoubleStream;
PTG:
Vars:
4
_ret 1 1 
$r1 1 1 
$r2 1 1 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 1
0 1 -1 
Constructors: 0

Summary: 0

java/util/stream/DoublePipeline.peek(Ljava/util/function/DoubleConsumer;)Ljava/util/stream/DoubleStream;
PTG:
Vars:
5
_ret 1 5 
$r4 1 11 
r3 1 -1 
$r2 1 5 
r0 1 -2 
Fields: 0
Accesses: 0
Functions: 2
16 4 -1 -2 5 11 
1 1 -2 
Constructors: 1
16 5

Summary: 2
-2 -1 
java/util/stream/DoublePipeline.lazySpliterator(Ljava/util/function/Supplier;)Ljava/util/Spliterator$OfDouble;
PTG:
Vars:
4
_ret 1 0 
$r0 1 0 
r1 1 -2 
r2 1 -1 
Fields: 0
Accesses: 0
Functions: 1
5 2 0 -2 
Constructors: 1
5 0

Summary: 3
-2 0 -1 
java/util/stream/DoublePipeline.allMatch(Ljava/util/function/DoublePredicate;)Z
PTG:
Vars:
6
r1 1 -2 
$r4 1 8 
$r3 1 5 
r0 1 -1 
$r5 1 8 
$r2 1 2 
Fields: 0
Accesses: 0
Functions: 3
0 2 -1 5 
2 2 -2 2 
11 1 8 
Constructors: 0

Summary: 4
5 -2 8 -1 
java/util/stream/DoublePipeline.makeNodeBuilder(JLjava/util/function/IntFunction;)Ljava/util/stream/Node$Builder;
PTG:
Vars:
4
_ret 1 1 
$r0 1 1 
r2 1 -3 
r1 1 -1 
Fields: 0
Accesses: 0
Functions: 1
0 0 
Constructors: 0

Summary: 3
1 -1 -3 
java/util/stream/DoublePipeline.sorted()Ljava/util/stream/DoubleStream;
PTG:
Vars:
3
_ret 1 1 
$r1 1 1 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 1
0 1 -1 
Constructors: 0

Summary: 1
-1 
java/util/stream/DoublePipeline.lambda$average$4()[D
PTG:
Vars:
2
_ret 1 1 
$r0 1 1 
Fields: 0
Accesses: 0
Functions: 0
Constructors: 0

Summary: 0

java/util/stream/DoublePipeline.count()J
PTG:
Vars:
3
r0 1 -1 
$r1 1 1 
$r2 1 6 
Fields: 0
Accesses: 0
Functions: 3
-1 0 
0 2 -1 1 
6 1 6 
Constructors: 0

Summary: 3
6 1 -1 
java/util/stream/DoublePipeline.average()Ljava/util/OptionalDouble;
PTG:
Vars:
8
_ret 2 39 45 
$r4 1 16 
r5 1 16 
$r1 1 1 
$r2 1 6 
$r6 2 39 45 
r0 1 -1 
$r3 1 11 
Fields: 0
Accesses: 0
Functions: 4
-1 0 
0 4 -1 1 6 11 
38 0 
31 1 16 
Constructors: 0

Summary: 5
6 16 11 1 -1 
java/util/stream/DoublePipeline.iterator()Ljava/util/PrimitiveIterator$OfDouble;
PTG:
Vars:
4
_ret 1 4 
$r1 1 1 
$r2 1 4 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 2
0 1 -1 
1 1 1 
Constructors: 0

Summary: 2
1 -1 
java/util/stream/DoublePipeline.max()Ljava/util/OptionalDouble;
PTG:
Vars:
4
_ret 1 6 
$r2 1 6 
r0 1 -1 
$r1 1 1 
Fields: 0
Accesses: 0
Functions: 2
-1 0 
0 2 -1 1 
Constructors: 0

Summary: 2
1 -1 
java/util/stream/DoublePipeline.parallel()Ljava/util/stream/DoubleStream;
PTG:
Vars:
4
_ret 1 1 
$r1 1 1 
$r2 1 1 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 1
0 1 -1 
Constructors: 0

Summary: 0

java/util/stream/DoublePipeline.lambda$average$6([D[D)V
PTG:
Vars:
2
r0 1 -2 
r1 1 -3 
Fields: 0
Accesses: 0
Functions: 2
4 1 -2 
12 1 -2 
Constructors: 0

Summary: 4
1 -2 0 -3 
java/util/stream/DoublePipeline.lazySpliterator(Ljava/util/function/Supplier;)Ljava/util/Spliterator;
PTG:
Vars:
4
_ret 1 2 
r1 1 -2 
$r2 1 2 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 1
0 2 -1 -2 
Constructors: 0

Summary: 2
-2 -1 
java/util/stream/DoublePipeline.<init>(Ljava/util/stream/AbstractPipeline;I)V
PTG:
Vars:
2
r1 1 -2 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 1
3 2 -1 -2 
Constructors: 1
3 -1

Summary: 2
-2 0 
java/util/stream/DoublePipeline.iterator()Ljava/util/Iterator;
PTG:
Vars:
3
_ret 1 1 
r0 1 -1 
$r1 1 1 
Fields: 0
Accesses: 0
Functions: 1
0 1 -1 
Constructors: 0

Summary: 1
-1 
java/util/stream/DoublePipeline.<init>(Ljava/util/Spliterator;IZ)V
PTG:
Vars:
2
r0 1 -1 
r1 1 -2 
Fields: 0
Accesses: 0
Functions: 1
4 2 -1 -2 
Constructors: 1
4 -1

Summary: 2
-2 0 
java/util/stream/DoublePipeline.lambda$sum$2([DD)V
PTG:
Vars:
1
r0 1 -2 
Fields: 0
Accesses: 0
Functions: 1
2 1 -2 
Constructors: 0

Summary: 2
-2 0 
java/util/stream/DoublePipeline.forEachOrdered(Ljava/util/function/DoubleConsumer;)V
PTG:
Vars:
3
r0 1 -1 
$r2 1 3 
r1 1 -2 
Fields: 0
Accesses: 0
Functions: 2
2 1 -2 
6 2 -1 3 
Constructors: 0

Summary: 4
3 -2 0 -1 
java/util/stream/DoublePipeline.mapToInt(Ljava/util/function/DoubleToIntFunction;)Ljava/util/stream/IntStream;
PTG:
Vars:
5
_ret 1 5 
$r2 1 5 
r3 1 -1 
r0 1 -2 
$r4 1 11 
Fields: 0
Accesses: 0
Functions: 2
1 1 -2 
22 4 -1 -2 5 11 
Constructors: 1
22 5

Summary: 2
-2 -1 
java/util/stream/DoublePipeline.collect(Ljava/util/function/Supplier;Ljava/util/function/ObjDoubleConsumer;Ljava/util/function/BiConsumer;)Ljava/lang/Object;
PTG:
Vars:
8
_ret 1 21 
$r7 1 21 
r2 1 11 
$r6 1 18 
r3 1 -1 
r5 1 -3 
r0 1 -4 
r4 1 -2 
Fields: 0
Accesses: 0
Functions: 4
16 3 -2 -3 11 
1 1 -4 
5 1 -4 
13 2 -1 18 
Constructors: 0

Summary: 6
18 -2 11 -4 -1 -3 
java/util/stream/DoublePipeline.summaryStatistics()Ljava/util/DoubleSummaryStatistics;
PTG:
Vars:
7
_ret 1 16 
$r4 1 16 
$r2 1 6 
$r1 1 1 
$r3 1 11 
r0 1 -1 
$r5 1 16 
Fields: 0
Accesses: 0
Functions: 2
-1 0 
0 4 -1 1 6 11 
Constructors: 0

Summary: 4
6 11 1 -1 
java/util/stream/DoublePipeline.boxed()Ljava/util/stream/Stream;
PTG:
Vars:
4
_ret 1 6 
$r1 1 1 
r0 1 -1 
$r2 1 6 
Fields: 0
Accesses: 0
Functions: 2
-1 0 
0 2 -1 1 
Constructors: 0

Summary: 2
1 -1 
java/util/stream/DoublePipeline.evaluateToNode(Ljava/util/stream/PipelineHelper;Ljava/util/Spliterator;ZLjava/util/function/IntFunction;)Ljava/util/stream/Node;
PTG:
Vars:
6
$r2 1 3 
_ret 1 3 
r4 1 -5 
r3 1 -1 
r1 1 -3 
r0 1 -2 
Fields: 0
Accesses: 0
Functions: 1
2 2 -2 -3 
Constructors: 0

Summary: 7
3 -5 1 -2 0 -1 -3 
java/util/stream/DoublePipeline.noneMatch(Ljava/util/function/DoublePredicate;)Z
PTG:
Vars:
6
r1 1 -2 
$r2 1 2 
$r4 1 8 
$r3 1 5 
$r5 1 8 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 3
0 2 -1 5 
2 2 -2 2 
11 1 8 
Constructors: 0

Summary: 4
5 -2 8 -1 
java/util/stream/DoublePipeline.lambda$average$5([DD)V
PTG:
Vars:
1
r0 1 -2 
Fields: 0
Accesses: 0
Functions: 1
9 1 -2 
Constructors: 0

Summary: 2
-2 0 
java/util/stream/DoublePipeline.<init>(Ljava/util/function/Supplier;IZ)V
PTG:
Vars:
2
r1 1 -2 
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 1
4 2 -1 -2 
Constructors: 1
4 -1

Summary: 2
-2 0 
