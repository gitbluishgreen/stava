20
java/util/concurrent/Semaphore.acquire()V
PTG:
Vars:
2
$r1 1 1 
r0 1 -1 
Fields: 1
-1 sync 1
Accesses: 1
0 1 -1 
Functions: 1
5 1 1 
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.reducePermits(I)V
PTG:
Vars:
2
r0 1 -1 
$r1 1 13 
Fields: 1
-1 sync 13
Accesses: 1
12 1 -1 
Functions: 2
17 1 13 
8 0 
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.getQueueLength()I
PTG:
Vars:
2
$r1 1 1 
r0 1 -1 
Fields: 1
-1 sync 1
Accesses: 1
0 1 -1 
Functions: 1
1 1 1 
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.release(I)V
PTG:
Vars:
2
r0 1 -1 
$r1 1 13 
Fields: 1
-1 sync 13
Accesses: 1
12 1 -1 
Functions: 2
17 1 13 
8 0 
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.toString()Ljava/lang/String;
PTG:
Vars:
10
$r3 1 11 
$r5 1 20 
$r2 1 8 
$r7 1 31 
$r4 1 16 
$r0 1 0 
$r6 1 26 
r1 1 -1 
$r8 1 34 
_ret 1 34 
Fields: 1
-1 sync 20
Accesses: 1
19 1 -1 
Functions: 8
0 2 0 8 
16 1 16 
4 1 0 
20 1 20 
7 2 -1 20 
26 1 26 
11 1 11 
31 1 31 
Constructors: 1
4 0

Summary: 1
8 
java/util/concurrent/Semaphore.tryAcquire(I)Z
PTG:
Vars:
2
$r1 1 13 
r0 1 -1 
Fields: 1
-1 sync 13
Accesses: 1
12 1 -1 
Functions: 2
8 0 
13 1 13 
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.hasQueuedThreads()Z
PTG:
Vars:
2
$r1 1 1 
r0 1 -1 
Fields: 1
-1 sync 1
Accesses: 1
0 1 -1 
Functions: 1
1 1 1 
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.drainPermits()I
PTG:
Vars:
2
$r1 1 1 
r0 1 -1 
Fields: 1
-1 sync 1
Accesses: 1
0 1 -1 
Functions: 1
1 1 1 
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.availablePermits()I
PTG:
Vars:
2
r0 1 -1 
$r1 1 1 
Fields: 1
-1 sync 1
Accesses: 1
0 1 -1 
Functions: 1
1 1 1 
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.<init>(IZ)V
PTG:
Vars:
4
$r3 1 9 
r0 1 -1 
$r2 2 9 20 
$r4 1 20 
Fields: 0
Accesses: 1
28 1 -1 
Functions: 3
1 1 -1 
25 1 20 
14 1 9 
Constructors: 3
1 -1
25 20
14 9

Summary: 1
-1 
java/util/concurrent/Semaphore.getQueuedThreads()Ljava/util/Collection;
PTG:
Vars:
4
r0 1 -1 
$r2 1 4 
$r1 1 1 
_ret 1 4 
Fields: 1
-1 sync 1
Accesses: 1
0 1 -1 
Functions: 1
1 1 1 
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.tryAcquire(IJLjava/util/concurrent/TimeUnit;)Z
PTG:
Vars:
3
r0 1 -1 
r1 1 -4 
$r2 1 13 
Fields: 1
-1 sync 13
Accesses: 1
12 1 -1 
Functions: 3
17 1 -4 
8 0 
13 1 13 
Constructors: 0

Summary: 2
-4 -1 
java/util/concurrent/Semaphore.tryAcquire(JLjava/util/concurrent/TimeUnit;)Z
PTG:
Vars:
3
r0 1 -1 
r1 1 -3 
$r2 1 1 
Fields: 1
-1 sync 1
Accesses: 1
0 1 -1 
Functions: 2
1 1 1 
5 1 -3 
Constructors: 0

Summary: 2
-3 -1 
java/util/concurrent/Semaphore.<init>(I)V
PTG:
Vars:
2
$r1 1 5 
r0 1 -1 
Fields: 0
Accesses: 1
13 1 -1 
Functions: 2
1 1 -1 
10 1 5 
Constructors: 2
1 -1
10 5

Summary: 1
-1 
java/util/concurrent/Semaphore.tryAcquire()Z
PTG:
Vars:
2
r0 1 -1 
$r1 1 1 
Fields: 1
-1 sync 1
Accesses: 1
0 1 -1 
Functions: 1
1 1 1 
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.acquireUninterruptibly(I)V
PTG:
Vars:
2
r0 1 -1 
$r1 1 13 
Fields: 1
-1 sync 13
Accesses: 1
12 1 -1 
Functions: 2
17 1 13 
8 0 
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.acquireUninterruptibly()V
PTG:
Vars:
2
$r1 1 1 
r0 1 -1 
Fields: 1
-1 sync 1
Accesses: 1
0 1 -1 
Functions: 1
5 1 1 
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.acquire(I)V
PTG:
Vars:
2
r0 1 -1 
$r1 1 13 
Fields: 1
-1 sync 13
Accesses: 1
12 1 -1 
Functions: 2
17 1 13 
8 0 
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.isFair()Z
PTG:
Vars:
2
r0 1 -1 
$r1 1 1 
Fields: 1
-1 sync 1
Accesses: 1
0 1 -1 
Functions: 0
Constructors: 0

Summary: 1
-1 
java/util/concurrent/Semaphore.release()V
PTG:
Vars:
2
r0 1 -1 
$r1 1 1 
Fields: 1
-1 sync 1
Accesses: 1
0 1 -1 
Functions: 1
5 1 1 
Constructors: 0

Summary: 1
-1 
