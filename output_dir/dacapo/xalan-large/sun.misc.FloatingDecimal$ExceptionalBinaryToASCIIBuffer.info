10
sun/misc/FloatingDecimal$ExceptionalBinaryToASCIIBuffer.<clinit>()V
PTG:
Vars:
1
$r0 1 0 
Fields: 0
Accesses: 0
Functions: 1
0 1 0 
Constructors: 0

Summary: 0

sun/misc/FloatingDecimal$ExceptionalBinaryToASCIIBuffer.toJavaFormatString()Ljava/lang/String;
PTG:
Vars:
3
_ret 1 1 
r0 1 -1 
$r1 1 1 
Fields: 1
-1 image 1
Accesses: 1
0 1 -1 
Functions: 0
Constructors: 0

Summary: 1
-1 
sun/misc/FloatingDecimal$ExceptionalBinaryToASCIIBuffer.isNegative()Z
PTG:
Vars:
1
r0 1 -1 
Fields: 0
Accesses: 1
0 1 -1 
Functions: 0
Constructors: 0

Summary: 1
-1 
sun/misc/FloatingDecimal$ExceptionalBinaryToASCIIBuffer.decimalDigitsExact()Z
PTG:
Vars:
2
r1 1 -1 
$r0 1 0 
Fields: 0
Accesses: 0
Functions: 1
6 1 0 
Constructors: 1
6 0

Summary: 1
-1 
sun/misc/FloatingDecimal$ExceptionalBinaryToASCIIBuffer.appendTo(Ljava/lang/Appendable;)V
PTG:
Vars:
6
$r4 1 -2 
$r7 1 -2 
$r3 1 34 
r0 1 -2 
$r6 1 12 
r2 1 -1 
Fields: 2
-1 image 34
-1 image 12
Accesses: 2
33 1 -1 
11 1 -1 
Functions: 3
37 2 -2 34 
54 0 
15 2 -2 12 
Constructors: 0

Summary: 2
0 -1 
sun/misc/FloatingDecimal$ExceptionalBinaryToASCIIBuffer.isExceptional()Z
PTG:
Vars:
1
r0 1 -1 
Fields: 0
Accesses: 0
Functions: 0
Constructors: 0

Summary: 1
-1 
sun/misc/FloatingDecimal$ExceptionalBinaryToASCIIBuffer.<init>(Ljava/lang/String;Z)V
PTG:
Vars:
2
r0 1 -1 
r1 1 -2 
Fields: 0
Accesses: 2
6 1 -1 
11 1 -1 
Functions: 1
1 1 -1 
Constructors: 1
1 -1

Summary: 1
-1 
sun/misc/FloatingDecimal$ExceptionalBinaryToASCIIBuffer.digitsRoundedUp()Z
PTG:
Vars:
2
$r0 1 0 
r1 1 -1 
Fields: 0
Accesses: 0
Functions: 1
6 1 0 
Constructors: 1
6 0

Summary: 1
-1 
sun/misc/FloatingDecimal$ExceptionalBinaryToASCIIBuffer.getDigits([C)I
PTG:
Vars:
3
r1 1 -1 
r2 1 -2 
$r0 1 0 
Fields: 0
Accesses: 0
Functions: 1
6 1 0 
Constructors: 1
6 0

Summary: 3
-2 0 -1 
sun/misc/FloatingDecimal$ExceptionalBinaryToASCIIBuffer.getDecimalExponent()I
PTG:
Vars:
2
r1 1 -1 
$r0 1 0 
Fields: 0
Accesses: 0
Functions: 1
6 1 0 
Constructors: 1
6 0

Summary: 1
-1 
