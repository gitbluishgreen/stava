4
java/util/regex/Pattern$BnM.match(Ljava/util/regex/Matcher;ILjava/lang/CharSequence;)Z
PTG:
Vars:
7
r2 1 -2 
$r7 1 65 
r0 1 -1 
r3 1 -4 
$r8 1 76 
r1 1 4 
$r4 1 102 
Fields: 4
-1 buffer 4
-1 optoSft 76
-1 lastOcc 65
-1 next 102
Accesses: 12
0 1 -1 
64 1 -1 
98 1 -2 
131 1 -2 
101 1 -1 
136 1 -2 
11 1 -2 
75 1 -1 
123 1 -2 
156 1 -2 
141 1 -2 
126 1 -2 
Functions: 3
81 0 
37 1 -4 
102 3 -2 -4 102 
Constructors: 0

Summary: 6
127 -2 -4 0 2 -1 
java/util/regex/Pattern$BnM.<init>([I[I[ILjava/util/regex/Pattern$Node;)V
PTG:
Vars:
5
r2 1 -3 
r3 1 -4 
r0 1 -1 
r1 1 -2 
r4 1 -5 
Fields: 0
Accesses: 4
16 1 -1 
6 1 -1 
22 1 -1 
11 1 -1 
Functions: 1
1 1 -1 
Constructors: 1
1 -1

Summary: 5
2 0 3 -1 1 
java/util/regex/Pattern$BnM.optimize(Ljava/util/regex/Pattern$Node;)Ljava/util/regex/Pattern$Node;
PTG:
Vars:
8
r0 1 -2 
$r1 1 -2 
r4 1 35 
$r6 1 172 
r2 1 16 
_ret 1 162 
$r5 1 162 
r3 1 30 
Fields: 2
-2 buffer 16
-2 next 172
Accesses: 3
10 1 -2 
154 1 -2 
171 1 -2 
Functions: 2
158 3 16 35 30 
175 5 16 162 35 172 30 
Constructors: 1
175 162

Summary: 3
30 0 35 
java/util/regex/Pattern$BnM.study(Ljava/util/regex/Pattern$TreeInfo;)Z
PTG:
Vars:
4
$r3 1 20 
r1 1 -1 
r0 1 -2 
$r2 1 6 
Fields: 2
-1 buffer 6
-1 next 20
Accesses: 5
0 1 -2 
16 1 -2 
19 1 -1 
5 1 -1 
11 1 -2 
Functions: 1
20 2 -2 20 
Constructors: 0

Summary: 3
-2 0 -1 
