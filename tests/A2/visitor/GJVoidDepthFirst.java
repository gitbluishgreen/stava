//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.io.PrintWriter;
import java.util.*;

class Pair<T1, T2> {
   public T1 first;
   public T2 second;

   public Pair(T1 a, T2 b) {
      first = a;
      second = b;
   }
}

class FunctionTable {
   Hashtable<String, Set<Integer>> points_to_set = new Hashtable<String, Set<Integer>>();
   boolean is_main_method = false;
   StatementNode entry_block;
   StatementNode exit_block;
}

class StatementNode {
   public static Hashtable<String, FunctionTable> functions;
   public static ArrayList<StatementNode> peg_dfs_order;
   public static Hashtable<Integer, String> abstract_types;
   public static Hashtable<String, Integer> thread_start_ids;// associates each start method on an object with the
                                                             // thread id it creates
   public String label_name;// may be null
   public int parent_thread;// gives the index of the thread that created it. Assume that main has a default
                            // of 0.
   public ArrayList<String> vars;// we can safely skip integer allocation statements.
   public ArrayList<StatementNode> predecessors;
   public ArrayList<StatementNode> successors;
   public Set<StatementNode> mhp_set;
   public Set<StatementNode> out_set;
   public boolean changed;// default is false, to denote whether MHP set changed or not.
   public Set<String> monitor_set;

   public StatementNode() {

   }

   public String toString() {
      return null;
   }

   protected Set<StatementNode> compute_thread_set(int current_thread) {
      Set<StatementNode> res = new HashSet<StatementNode>();
      for (StatementNode s : StatementNode.peg_dfs_order) {
         if (s.parent_thread == current_thread)
            res.add(s);
      }
      return res;
   }

   public static boolean set_equal(Set<StatementNode> s1, Set<StatementNode> s2) {
      if (s1.size() != s2.size())
         return false;
      for (StatementNode s : s1) {
         if (!s2.contains(s))
            return false;
      }
      return true;
   }

   protected void update_monitor(ArrayList<String> s) {
      for (String s1 : s)
         this.monitor_set.add(s1);
   }

   public void update() {
      // overriden
   }

   public Set<StatementNode> compute_out() {
      // overriden by children.
      return null;
   }

}

class SimpleStatement extends StatementNode {
   public SimpleStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }
      s1.addAll(mhp_set);
      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("%s = %s", vars.get(0), vars.get(1));
   }
}

class AllocationStatement extends StatementNode {
   public AllocationStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }
      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("%s = new %s()", vars.get(0),
            StatementNode.abstract_types.get(Integer.parseInt(vars.get(1))));
   }
}

class FieldWriteStatement extends StatementNode {
   public FieldWriteStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }
      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("%s.%s = %s", vars.get(0), vars.get(1), vars.get(2));
   }
}

class FieldReadStatement extends StatementNode {
   public FieldReadStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }
      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("%s = %s.%s", vars.get(0), vars.get(1), vars.get(2));
   }

}

class WhileNodeStatement extends StatementNode {
   public WhileNodeStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }

      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("while (%s)", vars.get(0));
   }
}

class IfNodeStatement extends StatementNode {
   public IfNodeStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }

      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("if (%s)", vars.get(0));
   }
}

class IfJoinStatement extends StatementNode {
   public IfJoinStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }

      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("Join on %s,%s", predecessors.get(0).toString(), predecessors.get(1).toString());
   }

}

class JoinStatement extends StatementNode {
   public JoinStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }

      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      String join_object = vars.get(0);
      int thread_id = StatementNode.thread_start_ids.get(join_object);//set of threads to be killed!
      Set<StatementNode> s2 = compute_thread_set(thread_id);
      s1.removeAll(s2);
      return s1;
   }

   public String toString() {
      return String.format("%s.join()", vars.get(0));
   }
}

class EntryStatement extends StatementNode {
   public EntryStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }
      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      String notified_id = this.vars.get(0);
      Set<StatementNode> kill_set = new HashSet<StatementNode>();
      for (StatementNode s : StatementNode.peg_dfs_order) {
         if (s.monitor_set.contains(notified_id))
            kill_set.add(s);
      }
      s1.removeAll(kill_set);
      return s1;
   }

   public String toString() {
      return String.format("synchronized(%s)", vars.get(0));
   }

}

class ExitStatement extends StatementNode {
   public ExitStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }

      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("exit (%s)", vars.get(0));
   }
}

class SystemPrintStatement extends StatementNode {
   public SystemPrintStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
   }

   public void update() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      for (StatementNode pred : this.predecessors) {
         Set<StatementNode> t = pred.out_set;
         s1.addAll(t);
      }

      if (!StatementNode.set_equal(s1, mhp_set)) {
         changed = true;
         mhp_set = s1;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      return s1;
   }

   public String toString() {
      return String.format("System.out.println(%s)", vars.get(0));
   }
}

class NotifiedEntryStatement extends StatementNode {
   public NotifiedEntryStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
      changed = false;
   }

   public void update() {
      StatementNode waiting_pred = this.predecessors.get(0);
      Set<StatementNode> final_set = new HashSet<StatementNode>(mhp_set);
      Set<StatementNode> waiting_pred_set = new HashSet<StatementNode>(waiting_pred.out_set);// out of waiting pred.
      String id = this.vars.get(0);
      Set<StatementNode> union_set = new HashSet<StatementNode>();
      Set<StatementNode> notifyall_set = new HashSet<StatementNode>();
      Set<StatementNode> notify_set = new HashSet<StatementNode>();
      Set<StatementNode> notified_entry_set = new HashSet<StatementNode>();
      for (StatementNode s : StatementNode.peg_dfs_order) {
         if (s instanceof NotifyStatement) {
            if (s.vars.get(0).equals(id) && s.mhp_set.contains(waiting_pred)) {
               // notifyPred
               notify_set.add(s);
               union_set.addAll(s.out_set);
            }
         } else if (s instanceof NotifyAllStatement) {
            if (s.vars.get(0).equals(id) && s.mhp_set.contains(waiting_pred)) {
               // notifyAllPred
               notifyall_set.add(s);
               union_set.addAll(s.out_set);
            }
         } else if (s instanceof NotifiedEntryStatement && s != this) {
            if (s.vars.get(0).equals(id))
               notified_entry_set.add(s);
         }
      }
      union_set.retainAll(waiting_pred_set);
      Set<StatementNode> gen_set = new HashSet<StatementNode>();
      for (StatementNode m : notified_entry_set) {
         StatementNode pre = m.predecessors.get(0);
         boolean z = pre.mhp_set.contains(waiting_pred);
         Set<StatementNode> s_t = new HashSet<StatementNode>(pre.mhp_set);
         s_t.retainAll(waiting_pred.mhp_set);
         if (!z)
            continue;
         s_t.retainAll(notifyall_set);
         if (s_t.size() > 0)
            gen_set.add(m);
      }
      final_set.addAll(gen_set);
      final_set.addAll(union_set);
      if (!StatementNode.set_equal(final_set, mhp_set)) {
         changed = true;
         mhp_set = final_set;
      }
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> s1 = new HashSet<StatementNode>(mhp_set);
      String notified_id = this.vars.get(0);
      Set<StatementNode> kill_set = new HashSet<StatementNode>();
      for (StatementNode s : StatementNode.peg_dfs_order) {
         if (s.monitor_set.contains(notified_id))
            kill_set.add(s);
      }
      s1.removeAll(kill_set);
      return s1;
   }

   public String toString() {
      return String.format("Notified Entry(%s)", vars.get(0));
   }
}

class NotifyAllStatement extends StatementNode {
   public NotifyAllStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
      changed = false;
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> kill_set = new HashSet<StatementNode>();
      Set<StatementNode> gen_set = new HashSet<StatementNode>();
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);
      String obj = this.vars.get(0);
      for (StatementNode s : StatementNode.peg_dfs_order) {
         if (s instanceof WaitingStatement && s.vars.get(0).equals(obj)) {
            kill_set.add(s);
         }
         if (s instanceof NotifiedEntryStatement && s.vars.get(0).equals(obj)
               && mhp_set.contains(s.predecessors.get(0))) {
            gen_set.add(s);
         }
      }
      out_set.addAll(gen_set);
      out_set.removeAll(kill_set);
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s.notifyAll()", vars.get(0));
   }
}

class NotifyStatement extends StatementNode {
   public NotifyStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
      changed = false;
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);
      String obj = this.vars.get(0);
      Set<StatementNode> kill_set = new HashSet<StatementNode>();
      Set<StatementNode> gen_set = new HashSet<StatementNode>();
      for (StatementNode s : StatementNode.peg_dfs_order) {
         if (s instanceof WaitingStatement && s.vars.get(0).equals(obj)) {
            kill_set.add(s);
         }
         if (s instanceof NotifiedEntryStatement && mhp_set.contains(s.predecessors.get(0))) {
            gen_set.add(s);
         }
      }
      if (kill_set.size() > 1)
         kill_set.clear();// empty set
      out_set.addAll(gen_set);
      out_set.removeAll(kill_set);
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s.notify()", vars.get(0));
   }
}

class WaitStatement extends StatementNode {
   public WaitStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
      monitor_set = new HashSet<String>();
      out_set = new HashSet<StatementNode>();
      changed = false;
   }

   public Set<StatementNode> compute_out() {
      return new HashSet<StatementNode>(mhp_set);// kill and gen are empty sets
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s.wait()", vars.get(0));
   }
}

class WaitingStatement extends StatementNode {
   public WaitingStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
      monitor_set = new HashSet<String>();
   }

   public Set<StatementNode> compute_out() {
      return new HashSet<StatementNode>(mhp_set);// kill and gen are empty sets
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s.waiting", vars.get(0));
   }
}

class StartStatement extends StatementNode {
   public StatementNode starting_function;

   public StartStatement() {
      starting_function = null;
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      successors = new ArrayList<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
      monitor_set = new HashSet<String>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);
      // gen is simply the begin statement. Kill set is empty.
      out_set.add(this.starting_function);
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s.start()(%s)", vars.get(0),starting_function.toString());
   }
}

class BeginStatement extends StatementNode {
   public Set<StatementNode> start_predecessors;

   public BeginStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      start_predecessors = new HashSet<StatementNode>();
      successors = new ArrayList<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
      out_set = new HashSet<StatementNode>();
      monitor_set = new HashSet<String>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.start_predecessors) {
         new_set.addAll(s.out_set);// take all start predecessors.
      }
      new_set.removeAll(compute_thread_set(this.parent_thread));// remove N(t) as part of
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("begin %s.run", vars.get(0));
   }
}

class EndStatement extends StatementNode {
   public EndStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("end %s.run", vars.get(0));
   }
}

class AndStatement extends StatementNode {
   public AndStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();

   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = %s && %s", vars.get(0), vars.get(1), vars.get(2));
   }
}

class CompareStatement extends StatementNode {
   public CompareStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = %s < %s", vars.get(0), vars.get(1), vars.get(2));
   }
}

class PlusStatement extends StatementNode {
   public PlusStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = %s + %s", vars.get(0), vars.get(1), vars.get(2));
   }
}

class MinusStatement extends StatementNode {
   public MinusStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = %s - %s", vars.get(0), vars.get(1), vars.get(2));
   }
}

class TimesStatement extends StatementNode {
   public TimesStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = %s * %s", vars.get(0), vars.get(1), vars.get(2));
   }
}

class ConstantStatement extends StatementNode {
   public ConstantStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = %s", vars.get(0), vars.get(1));
   }
}

class NotStatement extends StatementNode {
   public NotStatement() {
      vars = new ArrayList<String>();
      predecessors = new ArrayList<StatementNode>();
      monitor_set = new HashSet<String>();
      successors = new ArrayList<StatementNode>();
      out_set = new HashSet<StatementNode>();
      mhp_set = new HashSet<StatementNode>();
   }

   public Set<StatementNode> compute_out() {
      Set<StatementNode> out_set = new HashSet<StatementNode>(mhp_set);// gen and kill are empty sets.
      return out_set;
   }

   public void update() {
      Set<StatementNode> new_set = new HashSet<StatementNode>(mhp_set);
      for (StatementNode s : this.predecessors) {
         new_set.addAll(s.out_set);
      }
      if (!StatementNode.set_equal(mhp_set, new_set)) {
         changed = true;
         mhp_set = new_set;
      }
   }

   public String toString() {
      return String.format("%s = !%s", vars.get(0), vars.get(1));
   }
}

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class GJVoidDepthFirst<A> implements GJVoidVisitor<A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n, A argu) {
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
   }

   public void visit(NodeListOptional n, A argu) {
      if (n.present()) {
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
         }
      }
   }

   public void visit(NodeOptional n, A argu) {
      if (n.present())
         n.node.accept(this, argu);
   }

   public void visit(NodeSequence n, A argu) {
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
   }

   public void visit(NodeToken n, A argu) {
      tokenName = n.tokenImage;
   }

   private PrintWriter pw = new PrintWriter(System.out, true);
   private String tokenName;
   private Hashtable<String, StatementNode> cloned_functions = new Hashtable<String, StatementNode>();
   private FunctionTable function_object;
   private Hashtable<String, FunctionTable> functions = new Hashtable<String, FunctionTable>();
   private StatementNode prev_statement;
   private Hashtable<String, String> program_variables = new Hashtable<String, String>();
   private ArrayList<Pair<String, String>> mhp_queries = new ArrayList<Pair<String, String>>();
   private String label_name;
   private ArrayList<String> id_list = new ArrayList<String>();
   private int abstract_locations = 0;
   private Hashtable<Integer, String> abstract_types = new Hashtable<Integer, String>();
   private int statement_type = -1;
   private int thread_index = 1;// invoked threads!
   private ArrayList<String> monitor_object = new ArrayList<String>();
   private ArrayList<StatementNode> peg_dfs_order = new ArrayList<StatementNode>();// stores PEG in DFS order.

   private ArrayList<String> clone(ArrayList<String> a) {
      ArrayList<String> a1 = new ArrayList<>();
      for (String s : a)
         a1.add(s);
      return a1;
   }

   private StatementNode clone_graph(FunctionTable ft, String caller_object) {
      if (cloned_functions.containsKey(caller_object))
         return cloned_functions.get(caller_object);
      int thread_id = thread_index++;// new thread creation site.
      StatementNode.thread_start_ids.put(caller_object,thread_id);
      Set<StatementNode> visited_nodes = new HashSet<StatementNode>();
      Queue<StatementNode> q = new LinkedList<StatementNode>();
      Hashtable<StatementNode, StatementNode> map_node = new Hashtable<StatementNode, StatementNode>();
      q.add(ft.entry_block);
      Pair<StatementNode, StatementNode> p = new Pair<StatementNode, StatementNode>(null, null);
      visited_nodes.add(ft.entry_block);
      while (!q.isEmpty()) {
         StatementNode s = q.poll();
         // pw.printf("Cloning %s\n",s.toString());
         StatementNode n = new StatementNode();
         if (s instanceof SimpleStatement) {
            n = new SimpleStatement();
         } else if (s instanceof AllocationStatement) {
            n = new AllocationStatement();
         } else if (s instanceof FieldWriteStatement) {
            n = new FieldWriteStatement();
         } else if (s instanceof FieldReadStatement) {
            n = new FieldReadStatement();
         } else if (s instanceof WhileNodeStatement) {
            n = new WhileNodeStatement();
         } else if (s instanceof IfNodeStatement) {
            n = new IfNodeStatement();
         } else if (s instanceof IfJoinStatement) {
            n = new IfJoinStatement();
         } else if (s instanceof EntryStatement) {
            n = new EntryStatement();
         } else if (s instanceof ExitStatement) {
            n = new ExitStatement();
         } else if (s instanceof SystemPrintStatement) {
            n = new SystemPrintStatement();
         } else if (s instanceof BeginStatement) {
            n = new BeginStatement();
         } else if (s instanceof EndStatement) {
            n = new EndStatement();
         } else if (s instanceof NotifyStatement) {
            n = new NotifyStatement();
         } else if (s instanceof NotifyAllStatement) {
            n = new NotifyAllStatement();
         } else if (s instanceof NotifiedEntryStatement) {
            n = new NotifiedEntryStatement();
         } else if (s instanceof WaitStatement) {
            n = new WaitStatement();
         } else if (s instanceof WaitingStatement) {
            n = new WaitingStatement();
         } else if (s instanceof StartStatement) {
            n = new StartStatement();
         } else if (s instanceof AndStatement) {
            n = new AndStatement();
         } else if (s instanceof CompareStatement) {
            n = new CompareStatement();
         } else if (s instanceof PlusStatement) {
            n = new PlusStatement();
         } else if (s instanceof MinusStatement) {
            n = new MinusStatement();
         } else if (s instanceof TimesStatement) {
            n = new TimesStatement();
         } else if (s instanceof ConstantStatement) {
            n = new ConstantStatement();
         } else if (s instanceof NotStatement) {
            n = new NotStatement();
         } else if (s instanceof JoinStatement) {
            n = new JoinStatement();
         }
         n.vars = clone(s.vars);
         n.monitor_set = new HashSet<String>(s.monitor_set);
         n.label_name = s.label_name;
         n.parent_thread = thread_id;
         map_node.put(s, n);
         for (StatementNode it : s.successors) {
            if (!visited_nodes.contains(it)) {
               visited_nodes.add(it);
               q.add(it);
            }
         }
      }
      // pw.printf("Mapping is %s\n",map_node.toString());
      for (StatementNode it : visited_nodes) {
         StatementNode u = map_node.get(it);
         if (u instanceof BeginStatement)
            p.first = u;
         if (u instanceof EndStatement)
            p.second = u;
         // pw.printf("Trying to create successors for %s!\n",it.toString());
         for (StatementNode succ : it.successors) {
            StatementNode ns = map_node.get(succ);
            u.successors.add(ns);
            ns.predecessors.add(u);
         }
      }
      cloned_functions.put(caller_object, p.first);
      return p.first;
   }

   private void print_answers() {
      for (Pair<String, String> p : mhp_queries) {
         String l1 = p.first;
         String l2 = p.second;
         Set<StatementNode> s1 = new HashSet<StatementNode>();
         boolean z = false;
         for (StatementNode t : peg_dfs_order) {
            if (t.label_name != null && t.label_name.equals(l1)) {
               s1.addAll(t.mhp_set);
            }
         }
   
         for (StatementNode t : s1) {
            if (t.label_name != null && l2.equals(t.label_name)) {
               z = true;
               break;
            }
         }

         if (z)
            System.out.println("Yes");
         else
            System.out.println("No");
      }
   }

   private void print_mhp_info() {
      for (StatementNode s : peg_dfs_order) {
         if (s.label_name != null)
            pw.printf("%s: ", s.label_name);
         pw.printf("%s: MHP = %s\n", s.toString(), s.mhp_set.toString());
         pw.printf("%s: OUT = %s\n", s.toString(), s.out_set.toString());
      }
   }

   private void print_cfg_info() {
      for (Map.Entry<String, FunctionTable> e : functions.entrySet()) {
         FunctionTable ft = e.getValue();
         Queue<StatementNode> q = new LinkedList<>();
         StatementNode s;
         Set<StatementNode> vis = new HashSet<>();
         q.add(ft.entry_block);
         vis.add(ft.entry_block);
         pw.printf("Class %s\n", e.getKey());
         while (!q.isEmpty()) {
            s = q.poll();
            if (s.label_name != null) {
               pw.printf("%s: ", s.label_name);
            }
            pw.printf("%s\nSuccessors: %s\n Vars: %s\n", s.toString(), s.successors.toString(), s.vars.toString());
            for (StatementNode it : s.successors) {
               if (!vis.contains(it)) {
                  vis.add(it);
                  q.add(it);
               }
            }
         }
      }
   }

   private void print_debug_info() {
      for (StatementNode s : peg_dfs_order) {
         if (s.label_name != null)
            pw.printf("%s: ", s.label_name);
         pw.printf("%s\nVars: %s\n", s.toString(), s.vars.toString());
         pw.printf("Monitor nodes: %s\n", s.monitor_set.toString());
         pw.printf("Predecessors: %s\nSuccessors: %s\n", s.predecessors.toString(), s.successors.toString());
         pw.printf("Thread id: %d\n", s.parent_thread);
         pw.printf("\n");
      }
   }

   private void solve_equation() {
      Queue<StatementNode> work_list = new LinkedList<StatementNode>(peg_dfs_order);
      StatementNode s;
      // every statement has been added to the worklist atleast once.
      while (!work_list.isEmpty()) {
         s = work_list.poll();
         // .printf("Processing a Node of Type %s\n",s.getClass().getSimpleName());
         s.changed = false;
         s.update();
         if (s.changed) {
            // maintain symmetry
            for (StatementNode t : s.mhp_set) {
               boolean u = t.mhp_set.add(s);
               if (u)
                  work_list.add(t);
            }
         }
         Set<StatementNode> new_set = s.compute_out();
         boolean z = StatementNode.set_equal(new_set, s.out_set);
         if (!z) {
            s.out_set = new_set;
            // pw.printf("Information changed for %s!\n",s.toString());
            for (StatementNode t : s.successors)
               work_list.add(t);
            if (s instanceof NotifyAllStatement || s instanceof NotifyStatement) {
               // notify edges.
               for (StatementNode s1 : peg_dfs_order) {
                  if (s1 instanceof NotifiedEntryStatement && s.mhp_set.contains(s1.predecessors.get(0))) {
                     work_list.add(s1);
                  }
               }
            }
            if (s instanceof StartStatement) {
               StartStatement u = (StartStatement) s;
               work_list.add(u.starting_function);
            }
         }
      }
   }

   private void generate_PEG(StatementNode begin) {
      // adding start edges here.
      StatementNode s;
      Queue<StatementNode> q = new LinkedList<StatementNode>();
      q.add(begin);
      Set<StatementNode> visited = new HashSet<StatementNode>();
      visited.add(begin);
      while (!q.isEmpty()) {
         s = q.poll();
         if (s instanceof StartStatement) {
            String var_name = s.vars.get(0);
            String type_of_var = program_variables.get(var_name);// every class has one run method!
            FunctionTable called_method = functions.get(type_of_var);// what's the type of the variable?
            StartStatement start_stmt = (StartStatement) s;
            StatementNode p = clone_graph(called_method, var_name);
            start_stmt.starting_function = p;
            BeginStatement b = (BeginStatement) p;
            b.start_predecessors.add(start_stmt);
            generate_PEG(p);
         }
         for (StatementNode it : s.successors) {
            if (!visited.contains(it)) {
               visited.add(it);
               q.add(it);
            }
         }
      }
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass() f1 -> ( TypeDeclaration() )* f2 -> ( Query() )* f3 -> <EOF>
    */
   public void visit(Goal n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      StatementNode.functions = functions;
      FunctionTable ft = new FunctionTable();
      for (Map.Entry<String, FunctionTable> e : functions.entrySet()) {
         FunctionTable ft1 = e.getValue();
         if (ft1.is_main_method) {
            ft = ft1;
            break;
         }
      }
      // print_cfg_info();
      StatementNode.thread_start_ids = new Hashtable<String, Integer>();
      generate_PEG(ft.entry_block);
      Queue<StatementNode> q = new LinkedList<>();
      Set<StatementNode> visited = new HashSet<StatementNode>();
      q.add(ft.entry_block);
      visited.add(ft.entry_block);
      while (!q.isEmpty()) {
         StatementNode s = q.poll();
         peg_dfs_order.add(s);
         for (StatementNode t : s.successors) {
            if (!visited.contains(t)) {
               visited.add(t);
               q.add(t);
            }
            if (s instanceof StartStatement) {
               StartStatement u = (StartStatement) s;
               s = u.starting_function;
               if (!visited.contains(s)) {
                  visited.add(s);
                  q.add(s);
               }
            }
         }
      }
      StatementNode.peg_dfs_order = peg_dfs_order;
      StatementNode.abstract_types = abstract_types;
      //print_debug_info();
      solve_equation();
      //print_mhp_info();
      print_answers();
   }

   /**
    * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> "public" f4 -> "static" f5
    * -> "void" f6 -> "main" f7 -> "(" f8 -> "String" f9 -> "[" f10 -> "]" f11 ->
    * Identifier() f12 -> ")" f13 -> "{" f14 -> "try" f15 -> "{" f16 -> (
    * VarDeclaration() )* f17 -> ( QParStatement() )* f18 -> "}" f19 -> "catch" f20
    * -> "(" f21 -> Identifier() f22 -> Identifier() f23 -> ")" f24 -> "{" f25 ->
    * "}" f26 -> "}" f27 -> "}"
    */
   public void visit(MainClass n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s1 = tokenName;
      function_object = new FunctionTable();
      function_object.is_main_method = true;
      StatementNode s = new BeginStatement();
      s.vars.add(s1);
      prev_statement = s;
      function_object.entry_block = s;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      n.f18.accept(this, argu);
      n.f19.accept(this, argu);
      n.f20.accept(this, argu);
      n.f21.accept(this, argu);
      n.f22.accept(this, argu);
      n.f23.accept(this, argu);
      n.f24.accept(this, argu);
      n.f25.accept(this, argu);
      n.f26.accept(this, argu);
      n.f27.accept(this, argu);
      s = new EndStatement();
      s.vars.add(s1);
      s.predecessors.add(prev_statement);
      prev_statement.successors.add(s);
      function_object.exit_block = s;
      functions.put(s1, function_object);
      function_object = null;
   }

   /**
    * f0 -> ClassDeclaration() | ClassExtendsDeclaration()
    */
   public void visit(TypeDeclaration n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "class" f1 -> Identifier() f2 -> "{" f3 -> ( VarDeclaration() )* f4 ->
    * "}"
    */
   public void visit(ClassDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
   }

   /**
    * f0 -> "class" f1 -> Identifier() f2 -> "extends" f3 -> "Thread" f4 -> "{" f5
    * -> ( VarDeclaration() )* f6 -> ( MethodDeclaration() )* f7 -> "}"
    */
   public void visit(ClassExtendsDeclaration n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String class_name = tokenName;
      function_object = new FunctionTable();
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      tokenName = class_name;
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      functions.put(class_name, function_object);
      function_object = null;
   }

   /**
    * f0 -> Type() f1 -> Identifier() f2 -> ";"
    */
   public void visit(VarDeclaration n, A argu) {
      n.f0.accept(this, argu);
      String ty = tokenName;
      n.f1.accept(this, argu);
      String id = tokenName;
      program_variables.put(id, ty);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> "public" f1 -> "void" f2 -> "run" f3 -> "(" f4 -> ")" f5 -> "{" f6 ->
    * "try" f7 -> "{" f8 -> ( VarDeclaration() )* f9 -> ( QParStatement() )* f10 ->
    * "}" f11 -> "catch" f12 -> "(" f13 -> Identifier() f14 -> Identifier() f15 ->
    * ")" f16 -> "{" f17 -> "}" f18 -> "}"
    */
   public void visit(MethodDeclaration n, A argu) {

      StatementNode s = new BeginStatement();
      String class_name = tokenName;
      s.vars.add(class_name);// for run methods
      prev_statement = s;
      function_object.entry_block = s;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      n.f18.accept(this, argu);
      s = new EndStatement();
      s.vars.add(class_name);
      prev_statement.successors.add(s);
      s.predecessors.add(prev_statement);
      prev_statement = null;
      function_object.exit_block = s;
   }

   /**
    * f0 -> BooleanType() | IntegerType() | Identifier()
    */
   public void visit(Type n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "boolean"
    */
   public void visit(BooleanType n, A argu) {
      n.f0.accept(this, argu);
      tokenName = "boolean";
   }

   /**
    * f0 -> "int"
    */
   public void visit(IntegerType n, A argu) {
      n.f0.accept(this, argu);
      tokenName = "int";
   }

   /**
    * f0 -> ( Ann() )* f1 -> Statement()
    */
   public void visit(QParStatement n, A argu) {
      label_name = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> <SCOMMENT1> f1 -> Label() f2 -> <SCOMMENT2>
    */
   public void visit(Ann n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Identifier() f1 -> ":"
    */
   public void visit(Label n, A argu) {
      n.f0.accept(this, argu);
      label_name = tokenName;
      n.f1.accept(this, argu);
   }

   /**
    * f0 -> Block() | AssignmentStatement() | FieldAssignmentStatement() |
    * IfStatement() | WhileStatement() | MessageSend() | PrintStatement() |
    * SynchStatement()
    */
   public void visit(Statement n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "{" f1 -> ( QParStatement() )* f2 -> "}"
    */
   public void visit(Block n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
   }

   /**
    * f0 -> Identifier() f1 -> "=" f2 -> Expression() f3 -> ";"
    */
   public void visit(AssignmentStatement n, A argu) {
      n.f0.accept(this, argu);
      String id = tokenName;
      id_list.clear();
      id_list.add(id);
      statement_type = -1;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      StatementNode s;
      if (statement_type == 1) {
         // And statement.
         s = new AndStatement();
         s.vars = clone(id_list);
      } else if (statement_type == 2) {
         // compare statement
         s = new CompareStatement();
         s.vars = clone(id_list);
      } else if (statement_type == 3) {
         // plus statement
         s = new PlusStatement();
         s.vars = clone(id_list);
      } else if (statement_type == 4) {
         // minus statement
         s = new MinusStatement();
         s.vars = clone(id_list);
      } else if (statement_type == 5) {
         // times statement
         s = new TimesStatement();
         s.vars = clone(id_list);
      } else if (statement_type == 6) {
         // field read statement
         s = new FieldReadStatement();
         s.vars = clone(id_list);
      } else if (statement_type == 7) {
         // constant rhsm true/false/integer literal.
         s = new ConstantStatement();
         s.vars = clone(id_list);
      } else if (statement_type == 8) {
         // allocation statement.
         s = new AllocationStatement();
         s.vars = clone(id_list);
      } else if (statement_type == 9) {
         // assignment to either "this" or an identifier.
         s = new SimpleStatement();
         s.vars = clone(id_list);
      } else if (statement_type == 10) {
         // not expression
         s = new NotStatement();
         s.vars = clone(id_list);
      } else
         s = new StatementNode();
      if (label_name != null)
         s.label_name = label_name;
      s.update_monitor(monitor_object);
      s.predecessors.add(prev_statement);
      prev_statement.successors.add(s);
      prev_statement = s;
   }

   /**
    * f0 -> Identifier() f1 -> "." f2 -> Identifier() f3 -> "=" f4 -> Identifier()
    * f5 -> ";"
    */
   public void visit(FieldAssignmentStatement n, A argu) {

      n.f0.accept(this, argu);
      String id = tokenName;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String id1 = tokenName;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String id2 = tokenName;
      n.f5.accept(this, argu);
      StatementNode s = new FieldWriteStatement();
      ArrayList<String> list_id = new ArrayList<String>();
      list_id.add(id);
      list_id.add(id1);
      list_id.add(id2);
      s.vars = list_id;
      s.predecessors.add(prev_statement);
      prev_statement.successors.add(s);
      prev_statement = s;
      if (label_name != null)
         s.label_name = label_name;
      s.update_monitor(monitor_object);
   }

   /**
    * f0 -> "if" f1 -> "(" f2 -> Identifier() f3 -> ")" f4 -> Statement() f5 ->
    * "else" f6 -> Statement()
    */
   public void visit(IfStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String id1 = tokenName;
      StatementNode s = new IfNodeStatement();
      s.update_monitor(monitor_object);
      s.vars.add(id1);
      s.predecessors.add(prev_statement);
      prev_statement.successors.add(s);
      prev_statement = s;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      StatementNode p1 = prev_statement;
      prev_statement = s;
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      StatementNode p2 = prev_statement;
      StatementNode f = new IfJoinStatement();
      f.update_monitor(monitor_object);
      f.predecessors.add(p1);
      f.predecessors.add(p2);
      p1.successors.add(f);
      p2.successors.add(f);
      prev_statement = f;
   }

   /**
    * f0 -> "while" f1 -> "(" f2 -> Identifier() f3 -> ")" f4 -> Statement()
    */
   public void visit(WhileStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String id = tokenName;
      StatementNode s = new WhileNodeStatement();
      s.vars.add(id);
      s.update_monitor(monitor_object);
      s.predecessors.add(prev_statement);
      prev_statement.successors.add(s);
      prev_statement = s;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      prev_statement.successors.add(s);
      s.predecessors.add(prev_statement);// prev_statement shall remain unchanged.
   }

   /**
    * f0 -> "synchronized" f1 -> "(" f2 -> Identifier() f3 -> ")" f4 -> Statement()
    */
   public void visit(SynchStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String id = tokenName;
      StatementNode s = new EntryStatement();
      s.vars.add(id);
      s.predecessors.add(prev_statement);
      prev_statement.successors.add(s);
      s.update_monitor(monitor_object);
      prev_statement = s;
      monitor_object.add(id);
      if (label_name != null)
         s.label_name = label_name;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      StatementNode e = new ExitStatement();
      e.vars.add(id);
      e.update_monitor(monitor_object);
      e.predecessors.add(prev_statement);
      prev_statement.successors.add(e);
      prev_statement = e;
      monitor_object.remove(monitor_object.size() - 1);
   }

   /**
    * f0 -> "System.out.println" f1 -> "(" f2 -> Identifier() f3 -> ")" f4 -> ";"
    */
   public void visit(PrintStatement n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String id = tokenName;
      StatementNode s = new SystemPrintStatement();
      s.predecessors.add(prev_statement);
      prev_statement.successors.add(s);
      s.vars.add(id);
      prev_statement = s;
      if (label_name != null)
         s.label_name = label_name;
      s.update_monitor(monitor_object);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
   }

   /**
    * f0 -> AndExpression() | CompareExpression() | PlusExpression() |
    * MinusExpression() | TimesExpression() | FieldRead() | PrimaryExpression()
    */
   public void visit(Expression n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> Identifier() f1 -> "&&" f2 -> Identifier()
    */
   public void visit(AndExpression n, A argu) {
      n.f0.accept(this, argu);
      String id1 = tokenName;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String id2 = tokenName;
      id_list.add(id1);
      id_list.add(id2);
      statement_type = 1;
   }

   /**
    * f0 -> Identifier() f1 -> "<" f2 -> Identifier()
    */
   public void visit(CompareExpression n, A argu) {
      n.f0.accept(this, argu);
      String id1 = tokenName;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String id2 = tokenName;
      id_list.add(id1);
      id_list.add(id2);
      statement_type = 2;
   }

   /**
    * f0 -> Identifier() f1 -> "+" f2 -> Identifier()
    */
   public void visit(PlusExpression n, A argu) {
      n.f0.accept(this, argu);
      String id1 = tokenName;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String id2 = tokenName;
      id_list.add(id1);
      id_list.add(id2);
      statement_type = 3;
   }

   /**
    * f0 -> Identifier() f1 -> "-" f2 -> Identifier()
    */
   public void visit(MinusExpression n, A argu) {

      n.f0.accept(this, argu);
      String id1 = tokenName;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String id2 = tokenName;
      id_list.add(id1);
      id_list.add(id2);
      statement_type = 4;
   }

   /**
    * f0 -> Identifier() f1 -> "*" f2 -> Identifier()
    */
   public void visit(TimesExpression n, A argu) {
      n.f0.accept(this, argu);
      String id1 = tokenName;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String id2 = tokenName;
      id_list.add(id1);
      id_list.add(id2);
      statement_type = 5;
   }

   /**
    * f0 -> Identifier() f1 -> "." f2 -> Identifier()
    */
   public void visit(FieldRead n, A argu) {
      n.f0.accept(this, argu);
      String id1 = tokenName;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String id2 = tokenName;
      id_list.add(id1);
      id_list.add(id2);
      statement_type = 6;
   }

   /**
    * f0 -> callStartMethod() | callNotifyMethod() | callNotifyAllMethod() |
    * callWaitMethod() | callJoinMethod()
    */
   public void visit(MessageSend n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> Identifier() f1 -> "." f2 -> "start" f3 -> "(" f4 -> ")" f5 -> ";"
    */
   public void visit(callStartMethod n, A argu) {
      n.f0.accept(this, argu);
      String id = tokenName;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      StatementNode s = new StartStatement();
      s.vars.add(id);
      prev_statement.successors.add(s);
      s.update_monitor(monitor_object);
      if (label_name != null)
         s.label_name = label_name;
      s.predecessors.add(prev_statement);
      prev_statement = s;
   }

   /**
    * f0 -> Identifier() f1 -> "." f2 -> "notify" f3 -> "(" f4 -> ")" f5 -> ";"
    */
   public void visit(callNotifyMethod n, A argu) {
      n.f0.accept(this, argu);
      String id = tokenName;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      StatementNode s = new NotifyStatement();// releases lock
      s.update_monitor(monitor_object);
      s.vars.add(id);
      if (label_name != null)
         s.label_name = label_name;
      s.predecessors.add(prev_statement);
      prev_statement.successors.add(s);
      prev_statement = s;
   }

   /**
    * f0 -> Identifier() f1 -> "." f2 -> "notifyAll" f3 -> "(" f4 -> ")" f5 -> ";"
    */
   public void visit(callNotifyAllMethod n, A argu) {
      n.f0.accept(this, argu);
      String id = tokenName;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      StatementNode s = new NotifyAllStatement();
      s.vars.add(id);
      s.update_monitor(monitor_object);
      if (label_name != null)
         s.label_name = label_name;
      s.predecessors.add(prev_statement);
      prev_statement.successors.add(s);
      prev_statement = s;
   }

   /**
    * f0 -> Identifier() f1 -> "." f2 -> "wait" f3 -> "(" f4 -> ")" f5 -> ";"
    */
   public void visit(callWaitMethod n, A argu) {
      n.f0.accept(this, argu);
      String id = tokenName;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      StatementNode s = new WaitStatement();
      s.vars.add(id);
      s.update_monitor(monitor_object);
      monitor_object.remove(id);// release this lock!
      StatementNode s1 = new WaitingStatement();
      if (label_name != null)
         s.label_name = label_name;// wait gets the label.
      s1.vars.add(id);
      s1.update_monitor(monitor_object);
      StatementNode s2 = new NotifiedEntryStatement();
      s2.vars.add(id);
      s2.update_monitor(monitor_object);
      monitor_object.add(id);// reacquire the lock...
      s.successors.add(s1);
      s1.predecessors.add(s);
      s1.successors.add(s2);
      s2.predecessors.add(s1);
      prev_statement.successors.add(s);
      s.predecessors.add(prev_statement);
      prev_statement = s2;
   }

   /**
    * f0 -> Identifier() f1 -> "." f2 -> "join" f3 -> "(" f4 -> ")" f5 -> ";"
    */
   public void visit(callJoinMethod n, A argu) {
      n.f0.accept(this, argu);
      String id = tokenName;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      StatementNode s = new JoinStatement();
      if (label_name != null)
         s.label_name = label_name;
      s.update_monitor(monitor_object);
      s.vars.add(id);
      s.predecessors.add(prev_statement);
      prev_statement.successors.add(s);
      prev_statement = s;
   }

   /**
    * f0 -> IntegerLiteral() | TrueLiteral() | FalseLiteral() | Identifier() |
    * ThisExpression() | AllocationExpression() | NotExpression()
    */
   public void visit(PrimaryExpression n, A argu) {
      n.f0.accept(this, argu);
      if (n.f0.which == 3) {
         id_list.add(tokenName);
         statement_type = 9;
      }
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public void visit(IntegerLiteral n, A argu) {
      statement_type = 7;
      n.f0.accept(this, argu);
      id_list.add(tokenName);
   }

   /**
    * f0 -> "true"
    */
   public void visit(TrueLiteral n, A argu) {
      statement_type = 7;
      id_list.add("true");
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "false"
    */
   public void visit(FalseLiteral n, A argu) {
      statement_type = 7;
      id_list.add("false");
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public void visit(Identifier n, A argu) {
      n.f0.accept(this, argu);
   }

   /**
    * f0 -> "this"
    */
   public void visit(ThisExpression n, A argu) {
      n.f0.accept(this, argu);
      id_list.add("this");
      statement_type = 9;
   }

   /**
    * f0 -> "new" f1 -> Identifier() f2 -> "(" f3 -> ")"
    */
   public void visit(AllocationExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id = tokenName;
      abstract_locations++;
      abstract_types.put(abstract_locations, id);
      id_list.add(Integer.toString(abstract_locations));
      statement_type = 8;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
   }

   /**
    * f0 -> "!" f1 -> Identifier()
    */
   public void visit(NotExpression n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id = tokenName;
      statement_type = 10;
      id_list.add(id);
   }

   /**
    * f0 -> <SCOMMENT1> f1 -> Identifier() f2 -> "mhp?" f3 -> Identifier() f4 ->
    * <SCOMMENT2>
    */
   public void visit(Query n, A argu) {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String id1 = tokenName;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String id2 = tokenName;
      mhp_queries.add(new Pair<String, String>(id1, id2));
      n.f4.accept(this, argu);
   }
}
